# –ó–∞–¥–∞–Ω–∏–µ
# üìå –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω
# cookie-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è,
# –≥–¥–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# üìå –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ ¬´–í—ã–π—Ç–∏¬ª, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω
# cookie-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.


from flask import Flask, render_template, request, redirect, url_for, session, make_response, flash
from markupsafe import escape

app = Flask(__name__)
app.secret_key = b'7d4bda27fba3c41496e71c00'
'''
import os
print(os.urandom(12).hex())
  # get new secret key from Python Console   '7d4bda27fba3c41496e71c00'
'''


@app.route('/')
def my_shop():
    if 'username' in session:
        username = session['username']
        mail = session['mail']
        return render_template('index.html', username=username, mail=mail)
    else:
        return redirect(url_for('login'))


@app.route('/clothes/')
def clothes():
    clothes = {
        'name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        'size': '–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥',
        'amount': '–í –Ω–∞–ª–∏—á–∏–∏'
    }

    clothes_list = [
        {
            'name': '–ö–£–†–¢–ö–ê –ê–¢–û–ú',
            'size': 'XS, S, M, L, XL, XXL, XXXL',
            'amount': 13
        },
        {
            'name': '–ë–†–Æ–ö–ò –ê–¢–û–ú',
            'size': 'S, M, L, XXL',
            'amount': 25
        },
        {
            'name': '–ë—Ä—é–∫–∏',
            'size': 'XS, S, L, XXXL',
            'amount': 12
        }
    ]
    return render_template('odezhda.html', content=clothes_list)


@app.route('/shoes/')
def shoes():
    shoes = {
        'name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        'size': '–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥',
        'amount': '–í –Ω–∞–ª–∏—á–∏–∏'
    }

    shoes_list = [
        {
            'name': '–ë–æ—Ç–∏–Ω–∫–∏ –≠–ü–°–ò–õ–û–ù –≠–ü-1 —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥—è—â–∏–µ',
            'size': '40-36',
            'amount': 15
        }, {
            'name': '–ë–û–¢–ò–ù–ö–ò –ú–û–¢–û–† 10 –ö–ü–ü',
            'size': '36-44',
            'amount': 33
        }, {
            'name': '–ë–æ—Ç–∏–Ω–∫–∏ PEZZOL –ò–ù–î–ò–ì–û S3',
            'size': '39-44',
            'amount': 12
        }
    ]
    return render_template('obuv.html', content=shoes_list)


@app.route('/accessories/')
def accessories():
    accessories = {
        'name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        'size': '–†–∞–∑–º–µ—Ä—ã',
        'amount': '–í –Ω–∞–ª–∏—á–∏–∏'
    }

    accessories_list = [
        {
            'name': '–ö–ê–°–ö–ê –†–û–°–û–ú–ó RFI-3 BIOT',
            'size': 's m l',
            'amount': 8
        },
        {
            'name': '–û–ß–ö–ò I-SPECTOR –ë–†–ê–ô–¢–û–ù',
            'size': 's m l',
            'amount': 10
        }, {
            'name': '–ú–ê–°–ö–ê SPIROTEK 9000',
            'size': 's m l',
            'amount': 11
        }
    ]
    return render_template('accessories.html', content=accessories_list)


@app.get('/login/')
def checker_get():
    return render_template('login.html')


@app.post('/login/')
def login():
    if request.method == 'POST':
        if not request.form['username']:
            flash('–û—à–∏–±–∫–∞, –∑–∞–±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ –∏–º—è !', 'danger')
            return redirect(url_for('login'))
        if not request.form['mail']:
            flash('–û—à–∏–±–∫–∞, –∑–∞–±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ –ø–æ—á—Ç—É !', 'danger')
            return redirect(url_for('login'))
        # session
        session['username'] = escape(request.form.get('username'))
        session['mail'] = escape(request.form.get('mail'))
        # Cookie
        response = make_response(render_template('index.html', username=session['username'], mail=session['mail']))
        response.set_cookie('username', session['username'])
        response.set_cookie('mail', session['mail'])
        return response


@app.route('/logout/')
def logout():
    session.pop('username', None)  # remove key&value
    session.pop('mail', None)
    '''
    According to Flask's API their Session class is a wrapper around a python Dict. 
    According to the python documentation for dict.pop(): pop(key[, default])
    If key is in the dictionary, remove it and return its value, else return default. 
    If default is not given and key is not in the dictionary, a KeyError is raised.
    '''
    print(f'(Exit) username: {request.cookies.get("username")}')
    print(f'mail: {request.cookies.get("mail")}')
    response = make_response(render_template('login.html'))
    response.delete_cookie("username")
    response.delete_cookie("mail")
    # response.set_cookie(*request.cookies, expires=0)
    return response


if __name__ == '__main__':
    app.run(debug=True)
